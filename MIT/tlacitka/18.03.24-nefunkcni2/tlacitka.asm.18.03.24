;***************************************
.include "../template2.inc"
.include "../template3.inc"
;***************************************

; Macro
.MACRO digit_units_ON
	sbi DispCtrlP,3
	sbi DispCtrlP, 2
.ENDMACRO

.MACRO digit_tens_ON
	sbi DispCtrlP,3
	cbi DispCtrlP, 2
.ENDMACRO	

.MACRO digit_hundreds_ON
	cbi DispCtrlP,3
	sbi DispCtrlP, 2
.ENDMACRO

.MACRO digit_thousands_ON
	cbi DispCtrlP,3
	cbi DispCtrlP, 2
.ENDMACRO

.MACRO splitNumber
	ldi Number,@0
	rcall disassembleNumbers
.ENDMACRO

.MACRO splitNumberMove
	mov Number,@0
	rcall disassembleNumbers
.ENDMACRO

.MACRO up
	inc loopMove
.ENDMACRO

.MACRO down
	dec loopMove
.ENDMACRO


; Definitions
.def selectedNumber = r16
.def Number = r17
.def Iterator = r18
;
.def numberSum = r25
.def loopMove = r24

; Subprograms
init_Y_seg:
    ldi YL, low(segment_display)
    ldi YH, high(segment_display)
    ret

init_Z_seg:
    ldi ZH, high(2*segment_display)
    ldi ZL, low(2*segment_display)
    ret

initDisplay:
    rcall init_Y_seg
    std Y+0, ZeroReg
    std Y+1, ZeroReg
    std Y+2, ZeroReg
    std Y+3, ZeroReg
    ret

adjustOffsetZ:
    rcall init_Z_seg
    add ZL, selectedNumber
    adc ZH, ZeroReg
    ret

showNumber:
    lpm TmpReg, Z
    out DispDataP, TmpReg
    ret

print:
    rcall adjustOffsetZ
    rcall showNumber
    ret

disassembleNumbers:
;	THOUSANDS:
;	subi selectedNumber, 1000
;	inc thousandsCount
;	brsh THOUSANDS
		HUNDREDS:
		cpi TmpReg, 100
		brlo TENS
		subi TmpReg, 100
		inc numberSum
		cpi TmpReg, 100
		brsh HUNDREDS
		std Y+1, numberSum
		clr numberSum
			TENS:
			cpi TmpReg, 10
			brlo UNITS
			subi TmpReg, 10
			inc numberSum
			cpi TmpReg, 10
			brsh TENS
			std Y+2, numberSum
			clr numberSum
				UNITS:
				std Y+3, TmpReg
				clr TmpReg
ret


Main:
	clr 	Column
	clr 	Key
	ldi		PDelReg, 250
	clr 	offset

Main_Loop:
    ; Display q17
    seg_led_pwr_on
    rcall initDisplay

	splitNumberMove loopMove
    ; Setting up initial values for q17 and q18
    ;ldi selectedNumber, 0
	clr Key
	rcall mv_dig

	ldi DispPos, 3
		
	mov Scrap,Key
	out DispDataP, Scrap
		
				
	rcall col_scan		
	rcall row_scan
		
		
	mov Scrap, Key

    ldi TmpReg,0b00010001
	and TmpReg,Scrap
	breq q17	

	ldi TmpReg,0b00010010
	and TmpReg,Scrap
	breq q18
	
	rjmp disp

q17:
    ldd Iterator, Y+0
	ldi PDelReg, 5
 	rcall Delay1m
	digit_thousands_ON
	rcall disp

	ldd Iterator, Y+1
	ldi PDelReg, 5
 	rcall Delay1m
	digit_hundreds_ON
	rcall disp

	ldd Iterator, Y+2
	ldi PDelReg, 5
 	rcall Delay1m
	digit_tens_ON
	rcall disp

	ldd Iterator, Y+3
	ldi PDelReg, 5
 	rcall Delay1m
	digit_units_ON
	rcall disp

	up
    rjmp Main_Loop

q18:
    ldd Iterator, Y+0
	ldi PDelReg, 5
 	rcall Delay1m
	digit_thousands_ON
	rcall disp

	ldd Iterator, Y+1
	ldi PDelReg, 5
 	rcall Delay1m
	digit_hundreds_ON
	rcall disp

	ldd Iterator, Y+2
	ldi PDelReg, 5
 	rcall Delay1m
	digit_tens_ON
	rcall disp

	ldd Iterator, Y+3
	ldi PDelReg, 5
 	rcall Delay1m
	digit_units_ON
	rcall disp

	down
    rjmp Main_Loop

disp:
		out DispDataP, Scrap
		ldi TmpReg, 0xFF
		out DispDataD,TmpReg
ret

; Table
segment_display:
	.db	0b11000000, 0b11111001		; '0', '1'
	.db	0b10100100, 0b10110000		; '2', '3'
	.db	0b10011001, 0b10010010		; '4', '5'
	.db	0b10000010, 0b11111000		; '6', '7'
	.db	0b10000000, 0b10010000		; '8', '9'
	.db	0b10001000, 0b10000011		; 'A', 'B'
	.db	0b11000110, 0b10100001		; 'C', 'D'
	.db	0b10000110, 0b10001110		; 'E', 'F'
end_of_segment_display:

